/* EE2450 Fall 2018
 * 3D-Printer Project
 * Braulio Torres, Rocio Espinal, Wyatt Luong
 * Dr. Yi Zhao
 */
#include <stdio.h>
#include <math.h>
#include <stdbool.h>

enum ShapeCode {
    SC_CUBE = 0,
    SC_CUBOID = 1,
    SC_SPHERE = 2,
    SC_CYLINDER = 3,
    SC_CONE = 4,
    SC_COUNT = 5
};
enum ColorCode {
    CC_RED = 0,
    CC_GREEN = 1,
    CC_BLUE = 2,
    CC_BLACK = 3,
    CC_COUNT = 4
};
enum SizeCode {
    ZC_SMALL = 0,
    ZC_MEDIUM = 1,
    ZC_LARGE = 2,
    ZC_HUGE = 3,
    ZC_COUNT = 4
};
enum CommandOption {
    CO_HELP = 0,
    CO_PRINT = 1,
    CO_STAT = 2,
    CO_INVEN = 3,
    CO_EXIT = 4
};



typedef struct ObjectData_struct {
    int index;
    bool valid;
    bool printed;
    int shape;
    int color;
    double volume;
} ObjectData;

// defines
#define MAX_OBJECTS 1000
#define PI 3.1415926
// global data
ObjectData g_objectList[MAX_OBJECTS];
int g_objectCount = 0;
double redRaw = 1000, greenRaw = 1000, blueRaw = 1000, blackRaw = 1000, redTemp, blueTemp, greenTemp, blackTemp, colorCount[MAX_OBJECTS], shapeCount[MAX_OBJECTS], sizeCount[MAX_OBJECTS];
// function prototypes

void ProcessCommand(int command);

void DisplayOption(void);

void PrintObject(void);

ObjectData ReadObjectData(void);

void DisplayStatistics(void);

void ControlInventory();

void DisplayOption() {
    
    printf("\nCommand options:\n");
    printf(" 0- display help information\n");
    printf(" 1- print 3-D object\n");
    printf(" 2- object statistics\n");
    printf(" 3- materail inventory\n");
    printf(" 4- exit\n");
    
}

void DisplayHelp() {
    
    printf("\nCommand options:\n");
    printf(" 0- display help information - Displays Menu and Shape and Color Number Meaning.\n");
    printf("\n");
    printf(" 1- print 3-D object - User Input for desired shape, color and dimension.\n");
    printf("\n");
    printf(" 2- object statistics - User input statistics (percentage on shapes and colors printed, most popular color and shape, etc.)\n");
    printf("\n");
    printf(" 3- materail inventory - (track, display & restock raw materials.)\n");
    printf("\n");
    printf(" 4- exit\n");
    printf("\n");
    
    printf("*Legend*\n");
    printf("   0- Cube \t     0- Red \t Small: 0-250\n");
    printf("   1- Cuboid \t 1- Green \t Medium: 250-500\n");
    printf("   2- Sphere \t 2-Blue \t Large: 500-750\n");
    printf("   3- Cylinder \t 3-Black \t Huge: 750-100\n");
    printf("   4- Cone\n");
    
    
}

void ProcessCommand(int command){
    switch(command){
        case CO_HELP:
            DisplayHelp();
            break;
        case CO_PRINT:
            PrintObject();
            break;
        case CO_STAT:
            DisplayStatistics();
            break;
        case CO_INVEN:
            ControlInventory();
            break;
        case CO_EXIT:
            printf("Exit program ...\n");
            break;
        default:
        printf("Invalid command!\n");}
    
}

void PrintObject() {
    
    ObjectData current;
    // step 1 - read 3-D object data from user
    int objects, i =0;
    printf("How many objects : ");
    scanf("%d", &objects);
    for(i = 0; i < objects; i++) {
        current = ReadObjectData();
        g_objectList[g_objectCount] = current;
        g_objectCount++;
    }
    // step 2 - print 3-D object & update materail inventory
}

ObjectData ReadObjectData()
{
    ObjectData object, restock;
    object.index = g_objectCount;
    object.valid = true;
    object.printed = false;
    int i, color, shape;
    double length;
    double height;
    double width;
    double radius;
    // read shape and color
    
    printf("Please enter the shape and color of object :\n");
    printf("Shape (""Display Help Information"" For Shape Code 0-4): ");
    scanf("%d", &shape);
    for(i = 0; i >= 0; i++){
        if (0 > shape || shape > 4){
            printf("Choose a shape in range: ");
            scanf("%d", &shape);
        }
        else
            break;
    }
    object.shape = shape;
    shapeCount[SC_COUNT]++;
    
    if(object.shape == SC_CUBE) {
        shapeCount[SC_CUBE]++;
    }
    else if(object.shape == SC_CUBOID) {
        shapeCount[SC_CUBOID]++;
    }
    else if(object.shape == SC_SPHERE) {
        shapeCount[SC_SPHERE]++;
    }
    else if(object.shape == SC_CYLINDER) {
        shapeCount[SC_CYLINDER]++;
    }
    else if(object.shape == SC_CONE) {
        shapeCount[SC_CONE]++;
    }
    
    
    printf("Color (""Display Help Information"" For Color Code 0-3): ");
    scanf("%d", &color);
    for(i = 0; i >= 0; i++){
        if (0 > color || color > 3){
            printf("Choose a shape in range: ");
            scanf("%d", &color);
        }
        else
            break;
    }
    object.color = color;
    colorCount[CC_COUNT]++;
    
    if(object.color == CC_RED) {
        colorCount[CC_RED]++;
    }
    else if(object.color == CC_GREEN) {
        colorCount[CC_GREEN]++;
    }
    else if(object.color == CC_BLUE) {
        colorCount[CC_BLUE]++;
    }
    else if(object.color == CC_BLACK) {
        colorCount[CC_BLACK]++;
    }
    
    switch (object.shape)
    {
        case SC_CUBE:
            printf("Please enter cube's side length : ");
            scanf("%lf", &length);
            object.volume = length * length * length;
            
            for(i = 0; i >= 0; i++){
                if(object.volume > 1000) {
                    printf("Not enough material! Enter another cube's side length : ");
                    scanf("%lf", &length);
                    object.volume = length * length * length;
                }
                else
                    break;
            }
            
            printf("Cube Volume : %lf\n", object.volume);
            printf("\n");
            
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                if(redRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    redRaw = redTemp;
                    return restock;
                    break;
                }
            }
            
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
        case SC_CUBOID:
            printf("Please enter cuboid's length, height & width : ");
            scanf("%lf%lf%lf", &length, &width, &height);
            object.volume = length * width * height;
            
            for(i = 0; i >= 0; i++){
                if(object.volume > 1000) {
                    printf("Not enough material! Enter another cube's side length : ");
                    scanf("%lf%lf%lf", &length, &width, &height);
                    object.volume = length * width * height;
                }
                else
                    break;
            }
            
            printf("Cuboid Volume : %lf\n", object.volume);
            printf("\n");
            
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                if(redRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    redRaw = redTemp;
                    return restock;
                    break;
                }
            }
            
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
        case SC_SPHERE:
            printf("Please enter sphere's radius : ");
            scanf("%lf", &radius);
            object.volume = (4.0/3.0) * PI * (radius * radius * radius);
            
            for(i = 0; i >= 0; i++){
                if(object.volume > 1000) {
                    printf("Not enough material! Enter another cube's side length : ");
                    scanf("%lf", &radius);
                    object.volume = (4.0/3.0) * PI * (radius * radius * radius);
                }
                else
                    break;
            }
            
            printf("Sphere Volume : %lf\n", object.volume);
            printf("\n");
            
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                if(redRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    redRaw = redTemp;
                    return restock;
                    break;
                }
            }
            
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
        case SC_CYLINDER:
            printf("Please enter cylinder's radius and height : \n");
            printf("Radius : ");
            scanf("%lf", &radius);
            printf("Height : ");
            scanf("%lf", &height);
            object.volume = PI * (radius * radius) * height;
            
            for(i = 0; i >= 0; i++){
                if(object.volume > 1000) {
                    printf("Not enough material! Enter another cube's side length : ");
                    printf("Radius : ");
                    scanf("%lf", &radius);
                    printf("Height : ");
                    scanf("%lf", &height);
                    object.volume = PI * (radius * radius) * height;
                }
                else
                    break;
            }
            
            printf("Cylinder Volume : %lf\n", object.volume);
            printf("\n");
            
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                if(redRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    redRaw = redTemp;
                    return restock;
                    break;
                }
            }
            
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
        case SC_CONE:
            printf("Please enter cone's radius and height : \n");
            printf("Radius : ");
            scanf("%lf", &radius);
            printf("Height : ");
            scanf("%lf", &height);
            object.volume = (height/3.0) * PI * (radius * radius);
            
            for(i = 0; i >= 0; i++){
                if(object.volume > 1000) {
                    printf("Not enough material! Enter another cube's side length : ");
                    printf("Radius : ");
                    scanf("%lf", &radius);
                    printf("Height : ");
                    scanf("%lf", &height);
                    object.volume = (height/3.0) * PI * (radius * radius);
                }
                else
                    break;
            }
            
            printf("Cone Volume : %lf\n", object.volume);
            printf("\n");
            
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                if(redRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    redRaw = redTemp;
                    return restock;
                    break;
                }
            }
            
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
    }
    
    sizeCount[ZC_COUNT]++;
    if(object.volume >= 0 && object.volume <= 250) {
        sizeCount[ZC_SMALL]++;
    }
    else if(object.volume > 250 && object.volume <= 500) {
        sizeCount[ZC_MEDIUM]++;
    }
    else if(object.volume > 500 && object.volume <= 750) {
        sizeCount[ZC_LARGE]++;
    }
    else if(object.volume > 750 && object.volume <= 1000) {
        sizeCount[ZC_HUGE]++;
    }
    
    
    return object;
}




void DisplayStatistics()
{
    int option, i, maxVal2 = 0, maxVal1 = 0;
    printf("Which statistic would you like to see?\n");
    printf("\t 1) Shape and Color Usage\n");
    printf("\t 2) Most Frequently Used Color\n");
    printf("\t 3) Most Frequently Used Shape\n");
    printf("\t 4) Object Size Percentages\n");
    
    printf("Choose option : ");
    scanf("%d", &option);
    printf("\n");
    
    switch(option){
    
        case 1:
            printf("Color Percentages: \n");
            printf("\t Red : %.2lf%%\n", (colorCount[CC_RED]/colorCount[CC_COUNT])* 100);
            printf("\t Green : %.2lf%%\n", (colorCount[CC_GREEN]/colorCount[CC_COUNT] )* 100);
            printf("\t Blue : %.2lf%%\n", (colorCount[CC_BLUE]/colorCount[CC_COUNT])* 100);
            printf("\t Black : %.2lf%%\n", (colorCount[CC_BLACK]/colorCount[CC_COUNT])* 100);
            printf("\n");
            printf("Shape Percentages: \n");
            printf("\t Cube : %.2lf%%\n", (shapeCount[SC_CUBE]/shapeCount[SC_COUNT])* 100);
            printf("\t Cuboid : %.2lf%%\n", (shapeCount[SC_CUBOID]/shapeCount[SC_COUNT])* 100);
            printf("\t Sphere : %.2lf%%\n", (shapeCount[SC_SPHERE]/shapeCount[SC_COUNT])* 100);
            printf("\t Cylinder : %.2lf%%\n", (shapeCount[SC_CYLINDER]/shapeCount[SC_COUNT])* 100);
            printf("\t Cone : %.2lf%%\n", (shapeCount[SC_CONE]/shapeCount[SC_COUNT])* 100);
            break;
       
        case 2:
            for (i = 0; i < 5; i++){
        if (maxVal2 < colorCount[i])
            maxVal2 = colorCount[i];
            }
    
        if(colorCount[CC_RED] == maxVal2){
            printf("Most Popular Color is Red\n");
                }
        if(colorCount[CC_GREEN] == maxVal2){
            printf("Most Popular Color is Green\n");
                }
        if(colorCount[CC_BLUE] == maxVal2){
            printf("Most Popular Color is Blue\n");
                }
        if(colorCount[CC_BLACK] == maxVal2){
            printf("Most Popular Color is Black\n");
                }
            break;
           
        case 3:
            for (i = 0; i < 5; i++){
                if (maxVal1 < shapeCount[i])
                    maxVal1 = shapeCount[i];
            }
            
            if(shapeCount[SC_CUBE] == maxVal1){
                printf("Most Popular Shape is a Cube\n");
            }
            if(shapeCount[SC_CUBOID] == maxVal1){
                printf("Most Popular Shape is a Cuboid\n");
            }
            if(shapeCount[SC_SPHERE] == maxVal1){
                printf("Most Popular Shape is a Sphere\n");
            }
            if(shapeCount[SC_CYLINDER] == maxVal1){
                printf("Most Popular Shape is a Cylinder\n");
            }
            if(shapeCount[SC_CONE] == maxVal1){
                printf("Most Popular Shape is a Cone\n");
            }

            break;
        case 4:
            printf("Size Percentages(""Display Help Information"" For Size Definition): \n");
            printf("\t Small : %.2lf%%\n", (sizeCount[ZC_SMALL]/sizeCount[ZC_COUNT])* 100);
            printf("\t Medium : %.2lf%%\n", (sizeCount[ZC_MEDIUM]/sizeCount[ZC_COUNT])* 100);
            printf("\t Large : %.2lf%%\n", (sizeCount[ZC_LARGE]/sizeCount[ZC_COUNT])* 100);
            printf("\t Huge : %.2lf%%\n", (sizeCount[ZC_HUGE]/sizeCount[ZC_COUNT])* 100);
            printf("\n");
            break;
        }
}

void ControlInventory() {
    ObjectData update = g_objectList [g_objectCount-1];
    int option;
    
    printf("Choose one of the options below\n");
    printf(" 1) Restock\n 2) See Raw Material\n\n");
    printf("Choose option : ");
    scanf("%d", &option);
    
    switch(option){
        case 1:
            redRaw = 1000;
            greenRaw = 1000;
            blueRaw = 1000;
            blackRaw = 1000;
            break;
            
        case 2:
            printf("Current color : %d  Current volume :%f\n", update.color, update.volume);
            printf("%f\n", redRaw);
            printf("%f\n", greenRaw);
            printf("%f\n", blueRaw);
            printf("%f\n", blackRaw);
            break;
        
        default:
            break;
    }
    
}



int main() {
    int command = CO_HELP;
    printf("Welcome to 3-D Printer!");
    
    DisplayOption();
    
    do {
        printf("\nPlease enter command : ");
        scanf("%d", &command);
        printf("\n");
        ProcessCommand(command);
    }
    while (command != CO_EXIT);
    return 0;
}
