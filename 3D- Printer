/* EE2450 Fall 2018
 * 3D-Printer Project
 * Braulio Torres, Rocio Espinal, Wyatt Luong
 * Dr. Yi Zhao
 * dark.sight97@gmail.com
 *espinalrocio088@gmail.com
 */
#include <stdio.h>
#include <math.h>
#include <stdbool.h>

enum ShapeCode {
    SC_CUBE = 0,
    SC_CUBOID = 1,
    SC_SPHERE = 2,
    SC_CYLINDER = 3,
    SC_CONE = 4,
    SC_COUNT = 5
};
enum ColorCode {
    CC_RED = 0,
    CC_GREEN = 1,
    CC_BLUE = 2,
    CC_BLACK = 3,
    CC_COUNT = 4
};
enum CommandOption {
    CO_HELP = 0,
    CO_PRINT = 1,
    CO_STAT = 2,
    CO_INVEN = 3,
    CO_EXIT = 4
};



typedef struct ObjectData_struct {
    int index;
    bool valid;
    bool printed;
    int shape;
    int color;
    double volume;
} ObjectData;

// defines
#define MAX_OBJECTS 1000
#define PI 3.1415926
// global data
ObjectData g_objectList[MAX_OBJECTS];
int g_objectCount = 0;
double redRaw = 1000, greenRaw = 1000, blueRaw = 1000, blackRaw = 1000, redTemp, blueTemp, greenTemp, blackTemp, colorCount[MAX_OBJECTS];
// function prototypes

void ProcessCommand(int command);

void DisplayOption(void);

void PrintObject(void);

ObjectData ReadObjectData(void);

void DisplayStatistics(void);

void ControlInventory();

void DisplayOption() {
    
    printf("\nCommand options:\n");
    printf(" 0- display help information\n");
    printf(" 1- print 3-D object\n");
    printf(" 2- object statistics\n");
    printf(" 3- materail inventory\n");
    printf(" 4- exit\n");
    
}

void DisplayHelp() {
    
    printf("\nCommand options:\n");
    printf(" 0- display help information - Displays Menu and Shape and Color Number Meaning.\n");
    printf("\n");
    printf(" 1- print 3-D object - User Input for desired shape, color and dimension.\n");
    printf("\n");
    printf(" 2- object statistics - User input statistics (percentage on shapes and colors printed, most popular color and shape, etc.)\n");
    printf("\n");
    printf(" 3- materail inventory - (track, display & restock raw materials.)\n");
    printf("\n");
    printf(" 4- exit\n");
    printf("\n");
    
    printf("*Legend*\n");
    printf("   0- Cube \t     0- Red \n");
    printf("   1- Cuboid \t 1- Green\n");
    printf("   2- Sphere \t 2-Blue\n");
    printf("   3- Cylinder \t 3-Black\n");
    printf("   4- Sphere\n");
    
    
}

void ProcessCommand(int command){
    switch(command){
        case CO_HELP:
            DisplayHelp();
            break;
        case CO_PRINT:
            PrintObject();
            break;
        case CO_STAT:
            DisplayStatistics();
            break;
        case CO_INVEN:
            ControlInventory();
            break;
        case CO_EXIT:
            printf("Exit program ...\n");
            break;
        default:
        printf("Invalid command!\n");}
    
}

void PrintObject() {
    
    ObjectData current;
    // step 1 - read 3-D object data from user
    int objects, i =0;
    printf("How many objects : ");
    scanf("%d", &objects);
    for(i = 0; i < objects; i++) {
    current = ReadObjectData();
    g_objectList[g_objectCount] = current;
    g_objectCount++;
    }
    // step 2 - print 3-D object & update materail inventory
}

ObjectData ReadObjectData()
{
    ObjectData object, restock;
    object.index = g_objectCount;
    object.valid = true;
    object.printed = false;
    int i, color, shape;
    double length;
    double height;
    double width;
    double radius;
    // read shape and color
    
    printf("Please enter the shape and color of object :\n");
    printf("Shape (0-4): ");
    scanf("%d", &shape);
    for(i = 0; i >= 0; i++){
        if (0 > shape || shape > 4){
            printf("Choose a shape in range: ");
            scanf("%d", &shape);
        }
        else
            break;
    }
    object.shape = shape;
    
    printf("Color(0-3): ");
    scanf("%d", &color);
    for(i = 0; i >= 0; i++){
        if (0 > color || color > 3){
            printf("Choose a shape in range: ");
            scanf("%d", &color);
        }
        else
            break;
    }
    object.color = color;
    colorCount[CC_COUNT]++;
    
    if(object.color == CC_RED) {
        colorCount[CC_RED]++;
        }
    else if(object.color == CC_GREEN) {
        colorCount[CC_GREEN]++;
        }
    else if(object.color == CC_BLUE) {
        colorCount[CC_BLUE]++;
        }
    if(object.color == CC_BLACK) {
        colorCount[CC_BLACK]++;
        }
   
    switch (object.shape)
    {
        case SC_CUBE:
            printf("Please enter cube's side length : ");
            scanf("%lf", &length);
            object.volume = length * length * length;
            
            for(i = 0; i >= 0; i++){
                    if(object.volume > 1000) {
                        printf("Not enough material! Enter another cube's side length : ");
                        scanf("%lf", &length);
                        object.volume = length * length * length;
                    }
                    else
                        break;
                }
                
            printf("Cube Volume : %lf\n", object.volume);
            printf("\n");
           
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                    if(redRaw < 0){
                        printf("No more material! Go to ""Material Inventory"" to restock.\n");
                        redRaw = redTemp;
                        return restock;
                            break;
                        }
                    }
        
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
        case SC_CUBOID:
            printf("Please enter cuboid's length, height & width : ");
            scanf("%lf%lf%lf", &length, &width, &height);
            object.volume = length * width * height;
            
            for(i = 0; i >= 0; i++){
                if(object.volume > 1000) {
                    printf("Not enough material! Enter another cube's side length : ");
                    scanf("%lf%lf%lf", &length, &width, &height);
                    object.volume = length * width * height;
                }
                else
                    break;
            }
            
            printf("Cuboid Volume : %lf\n", object.volume);
            printf("\n");
            
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                if(redRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    redRaw = redTemp;
                    return restock;
                    break;
                }
            }
            
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
        case SC_SPHERE:
            printf("Please enter sphere's radius : ");
            scanf("%lf", &radius);
            object.volume = (4.0/3.0) * PI * (radius * radius * radius);
           
            for(i = 0; i >= 0; i++){
                if(object.volume > 1000) {
                    printf("Not enough material! Enter another cube's side length : ");
                    scanf("%lf", &radius);
                    object.volume = (4.0/3.0) * PI * (radius * radius * radius);
                }
                else
                    break;
            }
            
            printf("Sphere Volume : %lf\n", object.volume);
            printf("\n");
            
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                if(redRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    redRaw = redTemp;
                    return restock;
                    break;
                }
            }
            
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
        case SC_CYLINDER:
            printf("Please enter cylinder's radius and height : \n");
            printf("Radius : ");
            scanf("%lf", &radius);
            printf("Height : ");
            scanf("%lf", &height);
            object.volume = PI * (radius * radius) * height;
            
            for(i = 0; i >= 0; i++){
                if(object.volume > 1000) {
                    printf("Not enough material! Enter another cube's side length : ");
                    printf("Radius : ");
                    scanf("%lf", &radius);
                    printf("Height : ");
                    scanf("%lf", &height);
                    object.volume = PI * (radius * radius) * height;
                }
                else
                    break;
            }
            
            printf("Cylinder Volume : %lf\n", object.volume);
            printf("\n");
           
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                if(redRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    redRaw = redTemp;
                    return restock;
                    break;
                }
            }
            
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
        case SC_CONE:
            printf("Please enter cone's radius and height : \n");
            printf("Radius : ");
            scanf("%lf", &radius);
            printf("Height : ");
            scanf("%lf", &height);
            object.volume = (height/3.0) * PI * (radius * radius);
            
            for(i = 0; i >= 0; i++){
                if(object.volume > 1000) {
                    printf("Not enough material! Enter another cube's side length : ");
                    printf("Radius : ");
                    scanf("%lf", &radius);
                    printf("Height : ");
                    scanf("%lf", &height);
                    object.volume = (height/3.0) * PI * (radius * radius);
                }
                else
                    break;
            }
            
            printf("Cone Volume : %lf\n", object.volume);
            printf("\n");
            
            if(object.color == CC_RED) {
                redTemp = redRaw;
                redRaw = redRaw - object.volume;
                if(redRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    redRaw = redTemp;
                    return restock;
                    break;
                }
            }
            
            else if(object.color == CC_GREEN) {
                greenTemp = greenRaw;
                greenRaw = greenRaw - object.volume;
                if(greenRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    greenRaw = greenTemp;
                    return restock;
                    break;
                }
            }
            else if(object.color == CC_BLUE) {
                blueTemp = blueRaw;
                blueRaw = blueRaw - object.volume;
                if(blueRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blueRaw = blueTemp;
                    return restock;
                    break;
                }
            }
            if(object.color == CC_BLACK) {
                blackTemp = blackRaw;
                blackRaw = blackRaw - object.volume;
                if(blackRaw < 0){
                    printf("No more material! Go to ""Material Inventory"" to restock.\n");
                    blackRaw = blackTemp;
                    return restock;
                    break;
                }
            }
            break;
    }
    return object;
    }




void DisplayStatistics()
{
    int i, maxVal = 0;
    
    for (i = 0; i < 5; i++)
    {
        if (maxVal < colorCount[i])
            maxVal = colorCount[i];
    }
    
    if(colorCount[CC_RED] == maxVal){
        printf("Most Popular Color is Red\n");
    }
    if(colorCount[CC_GREEN] == maxVal){
        printf("Most Popular Color is Green\n");
    }
    if(colorCount[CC_BLUE] == maxVal){
        printf("Most Popular Color is Blue\n");
    }
    if(colorCount[CC_BLACK] == maxVal){
        printf("Most Popular Color is Black\n");
    }
    
    printf("Color Percentage: \n");
    printf("\t Red : %.2lf\n", (colorCount[CC_RED]/colorCount[CC_COUNT])* 100);
    printf("\t Green : %.2lf\n", (colorCount[CC_GREEN]/colorCount[CC_COUNT])* 100);
    printf("\t Blue : %.2lf\n", (colorCount[CC_BLUE]/colorCount[CC_COUNT])* 100);
    printf("\t Black : %.2lf\n", (colorCount[CC_BLACK]/colorCount[CC_COUNT])* 100);
    
   
}

void ControlInventory() {
    ObjectData update = g_objectList [g_objectCount-1];
    int option;
    
    printf("What would you like to do?\n");
    printf(" 1) Restock\n 2) See Raw Material\n\n");
    printf("Choose option : ");
    scanf("%d", &option);
    
    switch(option){
            case 1:
                redRaw = 1000;
                greenRaw = 1000;
                blueRaw = 1000;
                blackRaw = 1000;
            break;

        case 2:
            printf("Current shape : %d  Current volume :%f\n", update.shape, update.volume);
            printf("%f\n", redRaw);
            printf("%f\n", greenRaw);
            printf("%f\n", blueRaw);
            printf("%f\n", blackRaw);
            break;
    }
    
}
    


int main() {
    int command = CO_HELP;
    printf("Welcome to 3-D Printer!");
    
    DisplayOption();
    
    do {
        printf("\nPlease enter command : ");
        scanf("%d", &command);
        printf("\n");
        ProcessCommand(command);
    }
    while (command != CO_EXIT);
    return 0;
}

